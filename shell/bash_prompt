#!/bin/bash
# The various escape codes that we can use to color our prompt.
         RED="\[\033[0;31m\]"
      YELLOW="\[\033[1;33m\]"
LIGHT_YELLOW="\[\033[0;33m\]"
       GREEN="\[\033[0;32m\]"
  LIGHT_CYAN="\[\033[0;36m\]"
        CYAN="\[\033[1;36m\]"
  LIGHT_BLUE="\[\033[0;34m\]"
        BLUE="\[\033[1;34m\]"
   LIGHT_RED="\[\033[0;31m\]"
 LIGHT_GREEN="\[\033[1;32m\]"
       WHITE="\[\033[1;37m\]"
      PURPLE="\[\033[1;35m\]"
LIGHT_PURPLE="\[\033[0;35m\]"
  LIGHT_GRAY="\[\033[0;37m\]"
  COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
(LANG=en_EN.utf8; git branch > /dev/null 2>&1)
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(LANG=en_EN.utf8; git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working tree clean" ]]; then
    state="${GREEN} "
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state=" ${YELLOW}±"
  else
    state=" ${RED}⚡"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="Your branch is (.*) of"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  branch_pattern="^On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Set the final branch string.
  BRANCH=" ${LIGHT_GRAY}on ${GREEN}${branch}${state}${remote}${COLOR_NONE}"
}


# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_last_action_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="${LIGHT_GREEN}✔ "
  else
      PROMPT_SYMBOL="($(printf "%03d" $1))${RED}✘ "
  fi
}

function truncate_pwd () {
  newPWD="${PWD/#$HOME/~}"
  local pwdmaxlen=$((${COLUMNS:-20}/3))
  if [ ${#newPWD} -gt $pwdmaxlen ]
  then
     newPWD=" {...} ${newPWD: -$pwdmaxlen}"
 fi
}

# Docker info
function docker_info () {
    PS_DOCKER=""

    if [[ $DOCKER_CONTEXT != "" ]] ; then
        PS_DOCKER=" ${LIGHT_GRAY}| ${CYAN}$DOCKER_CONTEXT ${LIGHT_GRAY}|"
    fi

    if [[ $DOCKER_HOST != "" ]] ; then
        PS_DOCKER=" ${LIGHT_GRAY}| ${CYAN}$DOCKER_HOST ${LIGHT_GRAY}|"
    fi

    if [[ $DOCKER_MACHINE_NAME != "" ]] ; then
        PS_DOCKER=" ${LIGHT_GRAY}| ${CYAN}$DOCKER_MACHINE_NAME ${LIGHT_GRAY}|"
    fi
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_last_action_symbol $?

  docker_info

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  truncate_pwd

  # Set the bash prompt variable.
  PS1="${COLOR_NONE}[${LIGHT_RED}\u${COLOR_NONE}@${LIGHT_PURPLE}\h${COLOR_NONE}:${LIGHT_BLUE}${newPWD}${PS_DOCKER}${BRANCH}${LIGHT_GRAY}${COLOR_NONE}]\n${COLOR_NONE}$ "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt

export PS2="${LIGHT_RED}continue->${COLOR_NONE} " # for long lines
