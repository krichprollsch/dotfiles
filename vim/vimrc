" vim conf - Pierre Tachoire
" inspired by Vincent Jousse

set nocompatible	" remove vi compat
set title		" update term title
"set number		" add line number
set ruler		" show cursor pos
"set wrap
set scrolloff=3		" lines around scroll
set ignorecase		" search ignore case
set smartcase		" search case sensitive if caps char used
set incsearch		" highlight search results while typing
set hlsearch		" highlight search results
set visualbell		" remove beeps
set noerrorbells	" remove beeps
set hidden		" hide file while opening other files
set nobackup
set nowritebackup
set noswapfile

" backspace as usual
set backspace=indent,eol,start

syntax enable
set background=dark

filetype on
filetype plugin on
filetype indent on

highlight ColorColumn ctermbg=235 guibg=#2c2d27
let &colorcolumn=join(range(81,81),",")

" Desactiver les touches directionnelles
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" make plugins smoother
set lazyredraw

let mapleader = ","

" disable parent hightlight
let g:loaded_matchparen= 1

" always replace all occurences of a line
set gdefault

" Tabs and indentation
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab

autocmd FileType cucumber   setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType less       setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType css        setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType js         setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType yml        setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType toml       setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType features   setlocal shiftwidth=2 tabstop=2 softtabstop=2

" load plugins
source ~/.vimrc.bundles

" Syntastic
let g:syntastic_auto_loc_list = 1                       " auto open/close the errors list
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_loc_list_height = 5
"let g:syntastic_quiet_messages = {'level': 'warnings'}  " don't want warnings to be displayed
let g:syntastic_php_checkers = ['php', 'phpcs']
let g:syntastic_php_phpcs_args="--report=csv --standard=PSR2 --tab-width=0"
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" go
let g:go_list_type = "quickfix"

" F5 removes endline spaces
:nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" airline
set laststatus=2
let g:airline_powerline_fonts = 1

" lightline
let g:lightline = { 'colorscheme': 'solarized', }               "vim-lightline
set laststatus=2                                                "vim-lightline
set noshowmode                                                  "vim-lightline

" nerdtree
nmap <F7> :NERDTreeToggle<CR>

" ack
nmap <leader>a :Ack<space>

" start a substitute
map <leader>s :%Subvert/

" sudo to write
command W w !sudo tee % > /dev/null

" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
" F2 = toggle paste mode
nnoremap <F2> :set invpaste paste?<Enter>
imap <F2> <C-O><F2>
set pastetoggle=<F2>

" automatically strip trailing spaces on save
autocmd BufWritePre * :%s/\s\+$//e

" php syntax
function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

" Ack with ag
" see https://github.com/rking/ag.vim/issues/124#issuecomment-227038003
let g:ackprg = 'ag --vimgrep --smart-case'

" fzf
let g:fzf_history_dir = '~/.local/share/fzf-history'
nnoremap <silent> <c-p> :FZF<CR>

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
inoremap <expr><CR> pumvisible() ? "\<C-y>" : "\<cr>"
inoremap <expr><ESC> pumvisible() ? "\<C-e>" : "\<C-c>"
inoremap <expr><ENTER> pumvisible() ? "\<C-y>" : "\<cr>"

function! Smart_TabComplete()
  let line = getline('.')                         " current line

  let substr = strpart(line, -1, col('.')+1)      " from the start of the current
                                                  " line to one character right
                                                  " of the cursor
  let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction

inoremap <expr><TAB> pumvisible() ? "\<C-N>" : "\<c-r>=Smart_TabComplete()\<CR>"

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType php setlocal omnifunc=phpactor#Complete
