" vim conf - Pierre Tachoire
" inspired by Vincent Jousse

set nocompatible	" remove vi compat
set title		" update term title
"set number		" add line number
set ruler		" show cursor pos
"set wrap
set scrolloff=3		" lines around scroll
set ignorecase		" search ignore case
set smartcase		" search case sensitive if caps char used
set incsearch		" highlight search results while typing
set hlsearch		" highlight search results
set visualbell		" remove beeps
set noerrorbells	" remove beeps
set hidden		" hide file while opening other files
set nobackup
set nowritebackup
set noswapfile

" backspace as usual
set backspace=indent,eol,start

syntax enable
set background=dark

filetype on
filetype plugin on
filetype indent on

highlight ColorColumn ctermbg=235 guibg=#2c2d27
let &colorcolumn=join(range(81,81),",")

" Desactiver les touches directionnelles
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" make plugins smoother
set lazyredraw

let mapleader = ","

" disable parent hightlight
let g:loaded_matchparen= 1

" always replace all occurences of a line
set gdefault

" Tabs and indentation
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab

autocmd FileType cucumber   setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType less       setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType css        setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType js         setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType yml        setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType toml       setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType features   setlocal shiftwidth=2 tabstop=2 softtabstop=2

" load plugins
source ~/.vimrc.bundles

" Syntastic
let g:syntastic_auto_loc_list = 1                       " auto open/close the errors list
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_loc_list_height = 5
"let g:syntastic_quiet_messages = {'level': 'warnings'}  " don't want warnings to be displayed
let g:syntastic_php_checkers = ['php', 'phpcs']
let g:syntastic_php_phpcs_args="--report=csv --standard=PSR2 --tab-width=0"
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

" go
let g:go_list_type = "quickfix"

" F5 removes endline spaces
:nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" airline
set laststatus=2
let g:airline_powerline_fonts = 1

" tagbar
nmap <F8> :TagbarToggle<CR>

" nerdtree
nmap <F7> :NERDTreeToggle<CR>

" ack
nmap <leader>a :Ack<space>

" start a substitute
map <leader>s :%Subvert/

" sudo to write
command W w !sudo tee % > /dev/null

" http://vim.wikia.com/wiki/Toggle_auto-indenting_for_code_paste
" F2 = toggle paste mode
nnoremap <F2> :set invpaste paste?<Enter>
imap <F2> <C-O><F2>
set pastetoggle=<F2>

" automatically strip trailing spaces on save
autocmd BufWritePre * :%s/\s\+$//e

" php syntax
function! PhpSyntaxOverride()
  hi! def link phpDocTags  phpDefine
  hi! def link phpDocParam phpType
endfunction

augroup phpSyntaxOverride
  autocmd!
  autocmd FileType php call PhpSyntaxOverride()
augroup END

" Ack with ag
" see https://github.com/rking/ag.vim/issues/124#issuecomment-227038003
let g:ackprg = 'ag --vimgrep --smart-case'

" fzf
let g:fzf_history_dir = '~/.local/share/fzf-history'
nnoremap <silent> <c-p> :FZF<CR>

" neocomplete
set completeopt-=preview
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_auto_delimiter = 1
let g:neocomplete#max_list = 15
let g:neocomplete#force_overwrite_completefunc = 1
let g:neocomplete#auto_completion_start_length = 3
let g:neocomplete#sources#syntax#min_keyword_length = 3

let g:neocomplete#sources#dictionary#dictionaries = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

function! CleverTab()
    if pumvisible()
        return "\<C-n>"
    endif
    let substr = strpart(getline('.'), 0, col('.') - 1)
    let substr = matchstr(substr, '[^ \t]*$')
    if strlen(substr) == 0
        " nothing to match on empty string
        return "\<Tab>"
    else
        return neocomplete#start_manual_complete()
    endif
endfunction

imap <expr> <Tab> CleverTab()

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
